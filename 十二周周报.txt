				XSS
这周简单了解了一下xss漏洞和他的原理
方式类似于sql注入，但原理不同
sql注入是将用户输入的数据当作了sql语句放入了数据库执行。
xss将用户输入的数据当作html放在了页面上执行。
这里有两个关键条件：
第一是用户能够控制输入。
第二是原本程序的要执行的代码，拼接了用户输入的数据。
可以用xss获取别人的cookie，这样就不用输入账号密码登录了。

				SQLMAP小技巧
sqlmap是一种自动化的注入工具，可以让原本繁琐的注入语句变得方便起来，但是如果有waf，那么就要可怜你了。
sqlmap.py --gui
可以打开图形化界面，操作更方便，但是注意，英语不好的人慎入！
				第一个getshell
找到了一个网站，在里面找到了网站建站系统和版本，网上去找，网上去找exp，aspcms的，很久以前的，估计很久没更新了，网上找到了exp，拿到了管理员账号密码进入后台之后，就想getshell，我传了一个马，怎么也连接不上，不知道咋回事，可能有waf，学长说可以在源码里面写个小马。然后连接上了，后来发现有sql注入漏洞。尝试注入了一下，也拿到了账号密码。
				COOKIE注入
cookie注入其原理也和平时的注入一样，只不过说我们是将提交的参数已cookie方式提交了，而一般的注入我们是使用get或者post方式提交，get方式提交就是直接在网址后面加上需要注入的语句，post则是通过表单方式，get和post的不同之处就在于一个我们可以通过IE地址栏处看到我们提交的参数，而另外一个却不能。
相对post和get方式注入来说，cookie注入就要稍微繁琐一些了，要进行cookie注入，我们首先就要修改cookie，这里就需要使用到Javascript语言了。另外cookie注入的形成有两个必须条件，
   条件1：是程序对get和post方式提交的数据进行了过滤，但未对cookie提交的数据库进行过滤。
   条件2：在条件1的基础上，还需要程序对提交数据获取方式是直接request("xxx")的方式，未指明使用request对象的具体方法进行获取。
session
session是HTTP的一种机制，用来专门记录用户的状态，比如买东西啥的，买了啥之类的。因为HTTP是无状态的，所以需要这个东西。特定的用户有特定的session，它存储在服务器端，那么服务器怎么识别session属于哪个用户呢？这时候要用到cookie了。
cookieh'zoa
每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，就可以识别用户。如果客户端的浏览器禁用了 Cookie 怎么办？在URL后加上一个 sid=xxxxx 这样的参数，服务端据此来识别用户。3. Cookie还可以方便用户登录，账号密码可以写到Cookie里面，访问网站的时候，网站页面可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。
两者区别
总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。
因此：维持一个会话的核心就是客户端的唯一标识，即 session id。
